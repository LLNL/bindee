// Generated by bindee 2.1 from inheritance.hh.
#ifndef BIND_INHERITANCE_HH
#define BIND_INHERITANCE_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename Target>
void bind_Base(Target &target);
template <typename Target>
void bind_Derived(Target &target);

// Bind functions.

template <typename Target>
void bind_Base(Target &target) {
    using Class = NS::Base;

    std::string className = "Base";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def(py::init<int>());
    bindee.def("f", (void (Class::*)(int, double)) &Class::f);
}

template <typename Target>
void bind_Derived(Target &target) {
    using Class = NS::Derived;

    std::string className = "Derived";
    std::string docString = @DOC_STRING@;

    py::class_<Class, NS::Base> bindee(target, className.c_str(), docString.c_str());
}

#endif // BIND_INHERITANCE_HH
