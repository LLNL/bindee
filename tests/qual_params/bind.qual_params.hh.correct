// Generated by bindee 2.1.1 from qual_params.hh.
#ifndef BIND_QUAL_PARAMS_HH
#define BIND_QUAL_PARAMS_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix);
template <typename T, typename Target>
void bind_B(Target &target, const std::string &classPrefix);

// Bind functions.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix) {
    using Class = NS::A<T>;

    std::string className = classPrefix + "A";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
}

template <typename T, typename Target>
void bind_B(Target &target, const std::string &classPrefix) {
    using Class = NS::B<T>;

    std::string className = classPrefix + "B";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def("foo", (typename Class::A1 & (Class::*)(NS::A<T>, NS::A<T> *&, const typename Class::A1 &, typename Class::A2)) &Class::foo, @RETURN_VALUE_POLICY@);
}

#endif // BIND_QUAL_PARAMS_HH
