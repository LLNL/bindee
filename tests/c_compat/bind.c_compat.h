// Generated by bindee 2.1.2 from c_compat.h.
#ifndef BIND_C_COMPAT_H
#define BIND_C_COMPAT_H

#include <pybind11/pybind11.h>

@INCLUDES@

// Records.

template <typename Target>
void bind_Node(Target &target);

// Bind functions.

template <typename Target>
void bind_Node(Target &target) {
    namespace py = pybind11;
    using Class = Node;

    std::string className = "Node";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def("f", (void (Class::*)()) &Class::f);
    bindee.def_readwrite("next", &Class::next);
}

template <typename Target>
void bind_c_compat_globals(Target &target) {
    namespace py = pybind11;
    target.def("f", (void (*)(const int *, double)) &f);
    target.def("g", (double * (*)()) &g, @RETURN_VALUE_POLICY@);
    target.attr("x") = x;
}

#endif // BIND_C_COMPAT_H
