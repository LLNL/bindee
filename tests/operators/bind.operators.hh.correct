// Generated by bindee 2.1 from operators.hh.
#ifndef BIND_OPERATORS_HH
#define BIND_OPERATORS_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename Target>
void bind_Op(Target &target);

// Bind functions.

template <typename Target>
void bind_Op(Target &target) {
    using Class = Op;

    std::string className = "Op";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def("__pos__", (Class (Class::*)() const) &Class::operator+, py::is_operator());
    bindee.def("__neg__", (Class (Class::*)() const) &Class::operator-, py::is_operator());
    bindee.def("__add__", (Class (Class::*)(const Class &) const) &Class::operator+, py::is_operator());
    bindee.def("__sub__", (Class (Class::*)(const Class &) const) &Class::operator-, py::is_operator());
    bindee.def("__mul__", (Class (Class::*)(double) const) &Class::operator*, py::is_operator());
    bindee.def("__div__", (Class (Class::*)(const Class &) const) &Class::operator/, py::is_operator());
    bindee.def("__iadd__", (Class & (Class::*)(const Class &)) &Class::operator+=, py::is_operator());
    bindee.def("__isub__", (Class & (Class::*)(double)) &Class::operator-=, py::is_operator());
    bindee.def("__imul__", (Class & (Class::*)(double)) &Class::operator*=, py::is_operator());
    bindee.def("__idiv__", (Class & (Class::*)(double)) &Class::operator/=, py::is_operator());
    bindee.def("__lt__", (bool (Class::*)(double)) &Class::operator<, py::is_operator());
    bindee.def("__le__", (bool (Class::*)(double)) &Class::operator<=, py::is_operator());
    bindee.def("__gt__", (bool (Class::*)(const Class &)) &Class::operator>, py::is_operator());
    bindee.def("__ge__", (bool (Class::*)(const Class &)) &Class::operator>=, py::is_operator());
    bindee.def("__eq__", (bool (Class::*)(double)) &Class::operator==, py::is_operator());
    bindee.def("__ne__", (bool (Class::*)(const Class &)) &Class::operator!=, py::is_operator());
}

#endif // BIND_OPERATORS_HH
