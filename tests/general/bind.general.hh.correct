// Generated by bindee 2.1.2 from general.hh.
#ifndef BIND_GENERAL_HH
#define BIND_GENERAL_HH

#include <pybind11/pybind11.h>

@INCLUDES@

// Records.

template <typename Target>
void bind_Example(Target &target);

// Bind functions.

template <typename Target>
void bind_Example(Target &target) {
    namespace py = pybind11;
    using Class = NS::Example;

    std::string className = "Example";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def(py::init<int>(), py::arg("x"));
    bindee.def(py::init<const Class &>());
    bindee.def_property_readonly("y", (bool (Class::*)() const) &Class::getY);
    bindee.def_property("x", (const int (Class::*)() const) &Class::getX, (void (Class::*)(int)) &Class::setX);
    bindee.def("print", (void (Class::*)() const) &Class::print);
    bindee.def_static("type", (void (*)()) &Class::type);
    bindee.def("__add__", (Class (Class::*)(const Class &) const) &Class::operator+, py::is_operator());
    bindee.def("__iadd__", (Class & (Class::*)(const Class &)) &Class::operator+=, py::is_operator());
    bindee.def_readonly_static("ca", &Class::ca);
    bindee.def_readwrite("readwrite", &Class::readwrite);
}

template <typename Target>
void bind_general_globals(Target &target) {
    namespace py = pybind11;
    target.def("f", (void (*)(NS::Example *)) &NS::f, py::arg("e"));
}

#endif // BIND_GENERAL_HH
