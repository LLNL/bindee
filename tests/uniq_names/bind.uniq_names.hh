// Generated by bindee 2.1.2 from uniq_names.hh.
#ifndef BIND_UNIQ_NAMES_HH
#define BIND_UNIQ_NAMES_HH

#include <pybind11/pybind11.h>

@INCLUDES@

// Records.

template <typename Target>
void bind_Class_0(Target &target);
template <typename Target>
void bind_Class_1(Target &target);

// Bind functions.

template <typename Target>
void bind_Class_0(Target &target) {
    namespace py = pybind11;
    using Class = A::Class;

    std::string className = "Class";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def_property(@FOO_EXISTS@, nullptr, (void (Class::*)(int)) &Class::setFoo);
    bindee.def("foo", (void (Class::*)()) &Class::foo);
}

template <typename Target>
void bind_Class_1(Target &target) {
    namespace py = pybind11;
    using Class = B::Class;

    std::string className = "Class";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
}

#endif // BIND_UNIQ_NAMES_HH
