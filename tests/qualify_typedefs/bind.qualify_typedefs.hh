// Generated by bindee 2.1 from qualify_typedefs.hh.
#ifndef BIND_QUALIFY_TYPEDEFS_HH
#define BIND_QUALIFY_TYPEDEFS_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix);
template <typename Target>
void bind_B(Target &target);

// Bind functions.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix) {
    using Class = NS::A<T>;

    std::string className = classPrefix + "A";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
}

template <typename Target>
void bind_B(Target &target) {
    using Class = NS::B;

    std::string className = "B";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def("foo", (Class::INT (Class::*)(A<int>::INT)) &Class::foo);
    bindee.def("foo", (Class::INT (Class::*)(A<Class::INT>::TYP)) &Class::foo);
}

#endif // BIND_QUALIFY_TYPEDEFS_HH
