// Generated by bindee 2.1 from template.hh.
#ifndef BIND_TEMPLATE_HH
#define BIND_TEMPLATE_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename T, typename U, typename Target>
void bind_Example(Target &target, const std::string &classPrefix);

// Bind functions.

template <typename T, typename U, typename Target>
void bind_Example(Target &target, const std::string &classPrefix) {
    using Class = Example<T, U>;

    std::string className = classPrefix + "Example";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def(py::init<>());
    bindee.def("foo", (void (Class::*)(typename U::INT, @T0@, typename Class::INT, int)) &Class::foo<@T0@>);
    bindee.def("bar", (void (Class::*)(@T1@, @T1@, @T0@)) &Class::bar<@T0@, @T1@>);
    bindee.def_readwrite("t", &Class::t);
}

void bind_template_globals(py::module &bindee) {
    bindee.def("foo", (const @T0@ * (*)(@T0@ &)) &foo<@T0@>, @RETURN_VALUE_POLICY@, py::arg("t"));
}

#endif // BIND_TEMPLATE_HH
