// Generated by bindee 2.0 from inherit_templated.hh.
#ifndef BIND_INHERIT_TEMPLATED_HH
#define BIND_INHERIT_TEMPLATED_HH

#include <pybind11/pybind11.h>
namespace py = pybind11;

@INCLUDES@

// Records.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix);
template <typename T, typename Target>
void bind_B(Target &target, const std::string &classPrefix);
template <typename Target>
void bind_C(Target &target);

// Bind functions.

template <typename T, typename Target>
void bind_A(Target &target, const std::string &classPrefix) {
    using Class = NS::A<T>;

    std::string className = classPrefix + "A";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
    bindee.def_readwrite("x", &Class::x);
}

template <typename T, typename Target>
void bind_B(Target &target, const std::string &classPrefix) {
    using Class = NS::B<T>;

    std::string className = classPrefix + "B";
    std::string docString = @DOC_STRING@;

    py::class_<Class, NS::A<T>, NS::C> bindee(target, className.c_str(), docString.c_str());
    bindee.def_readwrite("y", &Class::y);
}

template <typename Target>
void bind_C(Target &target) {
    using Class = NS::C;

    std::string className = "C";
    std::string docString = @DOC_STRING@;

    py::class_<Class> bindee(target, className.c_str(), docString.c_str());
}

#endif // BIND_INHERIT_TEMPLATED_HH
